For this workshop, I've developed a hierarchy of classes that include the basic class Shape and its descendant classes Rectangle and Line to represent various forms. My experience with working with this class hierarchy has allowed me to understand the function of virtual functions in inheritance.I've learned how the Shape class's draw and getSpecs methods become polymorphic by designating them as virtual. I may override these functions in the derived classes thanks to this polymorphic behaviour, providing each form a distinct implementation. For instance, I modified the draw method to fit the geometries of the Rectangle and Line classes. The Line class draws a line with a defined length, whereas the Rectangle class creates a labelled rectangle with a specific height and width.The ability to dynamically dispatch, where the right function is called based on the actual object type at runtime, has been made possible through the use of virtual functions. This adaptability improves the code's modularity and extensibility. I don't have to change the existing coding to add new forms. However, at one point i thought a design can become more complicated if virtual functions are used excessively. To prevent excessive inheritance hierarchies and preserve a clean and logical class structure, careful thought must be given to whether functions should be designated virtual. The "fragile base class" problem, where modifications to the base class may unintentionally affect the behaviour of derived classes, can occur when virtual functions are used often.
The strength and beauty of object-oriented programming have been reinforced by working with this class hierarchy and understanding the function of virtual functions, giving me a practical and hands-on learning experience.